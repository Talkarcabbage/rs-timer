package com.minepop.talkar.timer.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import com.minepop.talkar.timer.Main;
import com.minepop.talkar.timer.Timer;

public class Taskbarwin extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2445104311740312791L;
	private JPanel contentPane;
	private JSlider slider;
	ArrayList<JPanel> tabList = new ArrayList<JPanel>();
	int gridRows = 5;
	
	public ArrayList<JPanel> getTabList() {
		return tabList;
	}

	public void setTabList(ArrayList<JPanel> tabList) {
		this.tabList = tabList;
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {

try {
    for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
            UIManager.setLookAndFeel(info.getClassName());
            break;
        }
    }
} catch (Exception e) {
    // If Nimbus is not available, you can set the GUI to another look and feel.
}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Taskbarwin frame = new Taskbarwin();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	int moveXinit, moveYinit;
	private JButton addButton;
	private JPanel buttonPanel;
	private JButton removeButton;
	private JTabbedPane tabbedPane;
	private JPanel mainPanel;
	private JButton addTabButton;
	private JButton btnT;
	public Taskbarwin() {
		this.setUndecorated(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(Toolkit.getDefaultToolkit().getScreenSize().width-350, Toolkit.getDefaultToolkit().getScreenSize().height-220, 350, 180);
		contentPane = new JPanel();


		contentPane.setFont(new Font("Arial", Font.BOLD, 11));
		contentPane.setBorder(null);
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		
		
		JPanel configPanel = new JPanel();
		configPanel.setBackground(Color.GRAY);
		contentPane.add(configPanel, BorderLayout.EAST);
		
		JCheckBox chckbxAot = new JCheckBox("AOT");
		chckbxAot.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				toggleAOT(((JCheckBox)arg0.getSource()).isSelected());
				
			}
		});
		configPanel.setLayout(new BorderLayout(0, 0));
		
		configPanel.add(chckbxAot, BorderLayout.NORTH);
		
		slider = new JSlider();
		slider.setValue(100);
		slider.setMinimum(5);
		
		slider.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				setTrans(((JSlider)arg0.getComponent()).getValue());
			}
		});
		slider.setOrientation(SwingConstants.VERTICAL);
		configPanel.add(slider);
		
		buttonPanel = new JPanel();
		buttonPanel.setBackground(Color.GRAY);
		buttonPanel.setBorder(null);
		configPanel.add(buttonPanel, BorderLayout.SOUTH);
		buttonPanel.setLayout(new BorderLayout(0, 0));
		
		addButton = new JButton("+");
		addButton.setToolTipText("Adds a new timer to the current tab.");
		buttonPanel.add(addButton, BorderLayout.NORTH);
		addButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try{
					
				String name = JOptionPane.showInputDialog(null, "Input a name for the timer.");	
				boolean isNormal = true;
				
				int dur;
				long startTime;
				
				if (name.startsWith("!")) {
					isNormal = false;
					name = name.substring(1);
					startTime = (long)(Math.floor(System.currentTimeMillis()/86400000)*86400000);
					dur = 86400000;
					
				} else {
					dur = 1000 * Integer.parseInt( JOptionPane.showInputDialog(null,"Input the timer's duration in seconds."));
					startTime = System.currentTimeMillis();
				}
				
				Main.addTimer(startTime, dur, getCurrentTimerTab(), isNormal, name);
				
				Main.saveTimers();
				
				} catch (NumberFormatException e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(null, "Could not add timer: Input not a number.");
				}
			}
		});
		addButton.setFont(new Font("SansSerif", Font.BOLD, 12));
		addButton.setForeground(Color.GREEN);
		addButton.setBackground(Color.GRAY);
		
		removeButton = new JButton("-");
		removeButton.setToolTipText("Removes a timer by name. The timer removed is the first timer found numerically in across all tabs.");
		removeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String nameToRemove = JOptionPane.showInputDialog("Enter the name of the timer to remove. To cancel, leave this field blank. This is CaSe SeNsItIvE.");
				if (nameToRemove != null & nameToRemove != "") {
					Main.removeTimer(nameToRemove);
				}
			}
		});
		
		addTabButton = new JButton("T");
		addTabButton.setToolTipText("Adds a new tab.");
		addTabButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				addNewTab(JOptionPane.showInputDialog(null, "Input a name for the tab."));
			}
		});
		addTabButton.setForeground(Color.GREEN);
		addTabButton.setFont(new Font("SansSerif", Font.BOLD, 12));
		addTabButton.setBackground(Color.GRAY);
		buttonPanel.add(addTabButton, BorderLayout.WEST);
		removeButton.setForeground(Color.RED);
		removeButton.setFont(new Font("SansSerif", Font.BOLD, 12));
		removeButton.setBackground(Color.GRAY);
		buttonPanel.add(removeButton, BorderLayout.SOUTH);
		
		btnT = new JButton("T");
		btnT.setToolTipText("Removes a tab by index number. ");
		btnT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int toRemove = Integer.parseInt(JOptionPane.showInputDialog(null, "Insert the numerical index of the CUSTOM tab to remove. You cannot remove tab 1 (Main). This will remove all timers on this tab. Entering a number below 2 will cancel."))-1;
				if (toRemove > 0 && toRemove < tabList.size()) {
					ArrayList<Timer> timerList = Main.getTimerList();
					for (int i = 0; i < timerList.size(); i++) {
						if (timerList.get(i).getTab() == toRemove) {
							timerList.remove(i);
							Main.getProgressBarList().remove(i);
						} else if (timerList.get(i).getTab() > toRemove) {
							timerList.get(i).setTab(timerList.get(i).getTab()-1);
						}
					}
					getTabList().get(toRemove).getParent().remove(getTabList().get(toRemove));
					getTabList().remove(toRemove);
					Main.saveTimers();
				}
			}
		});
		btnT.setBackground(Color.GRAY);
		btnT.setForeground(Color.RED);
		buttonPanel.add(btnT, BorderLayout.EAST);
		
		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBorder(null);
		contentPane.add(tabbedPane, BorderLayout.CENTER);
		
		tabbedPane.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseDragged(MouseEvent arg0) {
				setWinPosition(arg0.getXOnScreen()-moveXinit, arg0.getYOnScreen()-moveYinit);
			}
		});
		tabbedPane.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				moveXinit = e.getX();
				moveYinit = e.getY();
			}
			
		});
		
		mainPanel = new JPanel();
		tabbedPane.addTab("Main", null, mainPanel, null);
		mainPanel.setBorder(null);
		tabList.add(mainPanel);
		mainPanel.setLayout(new GridLayout(0, gridRows, 2, 2));
		
		
		
	}
	
	public void toggleAOT(boolean isOnTop) {
		this.setAlwaysOnTop(isOnTop);
	}
	
	public void addTimerBar(JProgressBar bar, int tab) {
		tabList.get(tab).add(bar);
	}
	
	public void removeTimerBar(JProgressBar bar) {
		bar.getParent().remove(bar);
	}
	
	public int getCurrentTimerTab() {
		return this.tabbedPane.getSelectedIndex();
	}
	
//	protected JPanel getTimerPanel() {
//		return timerPanel;
//	}
	
	public void setTrans(int transparency) {
		this.setOpacity(((float)transparency)/100.0f);
	}
	
	public void setWinPosition(int x, int y) {
		this.setBounds(x, y, this.getWidth(), this.getHeight());
	}
	
	public JTabbedPane getTabbedPane() {
		return tabbedPane;
	}

	public int getGridRows() {
		return gridRows;
	}

	public void setGridRows(int gridRows) {
		for (JPanel p : this.getTabList()) {
			GridLayout panelLayout = (GridLayout)(p.getLayout());
			panelLayout.setRows(gridRows);
		}
		this.gridRows = gridRows;
		this.revalidate();
		this.repaint();
	}
	
	public void addNewTab(String name) {
		JPanel newPanel = new JPanel();
		newPanel.setBorder(null);
		newPanel.setLayout(new GridLayout(gridRows, 0, 2, 2));
		newPanel.setName(name);
		tabList.add(newPanel);
		tabbedPane.addTab(name, newPanel);
		Main.saveTimers();
	}
}
